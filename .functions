# Function to download all episodes from iplayer with youtube-dl
function iplayer(){
	youtube-dl \
	--netrc \
	--ignore-errors \
	--no-overwrites \
	--no-check-certificate \
	--no-part \
	--no-mtime \
	--no-continue \
	--no-playlist \
	--embed-thumbnail \
	--add-metadata \
	--batch-file "$1"
}


function m3u8(){
	ffmpeg -i $1 -bsf:a aac_adtstoasc -vcodec copy -c copy -crf 50 "$2".mp4
}


function UFC(){
   youtube-dl https://ufcfightpass.com/video/$1 --netrc
}

# RecordIOS
function ios_recordsim(){
	xcrun simctl io booted recordVideo ~/Desktop/simulator.mov	
}

# Android Screenshot
function android_screenshot(){
	 adb shell screencap -p /sdcard/screenshot.png && adb pull /sdcard/screenshot.png &&  adb shell rm /sdcard/screenshot.png
}

function togif(){
	ffmpeg -i "$1" -vf scale=320:-1 -r 6 -f gif -y ~/Desktop/"$2".gif
}

function brazzers(){
	ffmpeg -i "$1" -map 0:3 -map 0:4 -codec copy "$2".mp4
}


# Skillshare Downloader
function skillshare(){
	ffmpeg -i $1 -c copy $2.mkv
}

function getmp4(){
	ffmpeg -i $1 -c copy $2.mp4
}


function fg(){
	echo "AUDIO: " "$1"
	ffmpeg -i "$1" -i $2 -async 1 -c copy "$3".mp4
}

# Create a new directory and enter it
function md() {
	mkdir -p "$@" && cd "$@"
}

# FLAC to MP3
function flacc(){
  setopt localoptions rmstarsilent
  for i in *.flac ; do 
    ffmpeg -i "$i" -ab 320k -map_metadata 0 "$(basename "${i/.flac}")".mp3
    rm -f "$i"
  done
}

# find shorthand
function f() {
    find . -name "$1" 2>&1 | grep -v 'Permission denied'
}


# cd into whatever is the forefront Finder window.
cdf() {  # short for cdfinder
  cd "`osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)'`"
}


# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}"
	open "http://localhost:${port}/"
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

function https-server () {
    http-server --ssl --cert ~/.ssh/localhost.crt --key ~/.ssh/localhost.key -o
}


# Copy w/ progress
cp_p () {
  rsync -WavP --human-readable --progress $1 $2
}



# get gzipped size
function gz() {
	echo "orig size    (bytes): "
	cat "$1" | wc -c
	echo "gzipped size (bytes): "
	gzip -c "$1" | wc -c
}

# whois a domain or a URL
function whois() {
	local domain=$(echo "$1" | awk -F/ '{print $3}') # get domain from URL
	if [ -z $domain ] ; then
		domain=$1
	fi
	echo "Getting whois record for: $domain â€¦"

	# avoid recursion
					# this is the best whois server
													# strip extra fluff
	/usr/bin/whois -h whois.internic.net $domain | sed '/NOTICE:/q'
}

function makebook() {
  mkdir build chapters images
  touch metadata.yml Makefile
}


# Extract archives - use: extract <file>
# Based on http://dotfiles.org/~pseup/.bashrc
function extract() {
	if [ -f "$1" ] ; then
		local filename=$(basename "$1")
		local foldername="${filename%%.*}"
		local fullpath=`perl -e 'use Cwd "abs_path";print abs_path(shift)' "$1"`
		local didfolderexist=false
		if [ -d "$foldername" ]; then
			didfolderexist=true
			read -p "$foldername already exists, do you want to overwrite it? (y/n) " -n 1
			echo
			if [[ $REPLY =~ ^[Nn]$ ]]; then
				return
			fi
		fi
		mkdir -p "$foldername" && cd "$foldername"
		case $1 in
			*.tar.bz2) tar xjf "$fullpath" ;;
			*.tar.gz) tar xzf "$fullpath" ;;
			*.tar.xz) tar Jxvf "$fullpath" ;;
			*.tar.Z) tar xzf "$fullpath" ;;
			*.tar) tar xf "$fullpath" ;;
			*.taz) tar xzf "$fullpath" ;;
			*.tb2) tar xjf "$fullpath" ;;
			*.tbz) tar xjf "$fullpath" ;;
			*.tbz2) tar xjf "$fullpath" ;;
			*.tgz) tar xzf "$fullpath" ;;
			*.txz) tar Jxvf "$fullpath" ;;
			*.zip) unzip "$fullpath" ;;
			*) echo "'$1' cannot be extracted via extract()" && cd .. && ! $didfolderexist && rm -r "$foldername" ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}

# who is using the laptop's iSight camera?
camerausedby() {
    echo "Checking to see who is using the iSight cameraâ€¦ ðŸ“·"
    usedby=$(lsof | grep -w "AppleCamera\|USBVDC\|iSight" | awk '{printf $2"\n"}' | xargs ps)
    echo -e "Recent camera uses:\n$usedby"
}

# `shellswitch bash`
# `shellswitch zsh`
shellswitch () {
	chsh -s $(brew --prefix)/bin/$1
}



